% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fn_ppwsvm.R
\name{ppwsvm}
\alias{ppwsvm}
\title{Penalized Principal Weighted SVM (MM-GCD based) for Sparse Sufficient Dimension Reduction}
\usage{
ppwsvm(
  x,
  y,
  H = 10,
  C = 1,
  lambda,
  gamma = 3.7,
  penalty = "grSCAD",
  max.iter = 100
)
}
\arguments{
\item{x}{Numeric predictor matrix (n x p), where n is the sample size and p is the number of predictors.}

\item{y}{Binary response vector of length n, coded as \code{-1, 1}.}

\item{H}{Number of quantile slices for principal machine construction (default: 10).}

\item{C}{Regularization parameter.}

\item{lambda}{Penalty parameter for sparsity.}

\item{gamma}{Regularization parameter for SCAD/MCP penalty (default: 3.7).}

\item{penalty}{Penalty type: \code{"grSCAD"}, \code{"grLasso"}, or \code{"grMCP"}.}

\item{max.iter}{Maximum number of iterations (default: 100).}
}
\value{
A list with components:
\item{Mn}{Estimated SDR matrix.}
\item{evalues}{Eigenvalues of the SDR matrix.}
\item{evectors}{Eigenvectors spanning the SDR subspace.}
\item{x}{(Optional) The original predictor matrix.}
}
\description{
Implements the penalized principal weighted support vector machine (P\eqn{^2}WSVM) for sparse sufficient dimension reduction (SDR), using an MM-GCD (majorization-minimization group coordinate descent) algorithm. Observation-level weights are incorporated to account for class imbalance or sampling design, and group penalties (SCAD, Lasso, MCP) are supported for structured sparsity.
}
\details{
This function fits a penalized principal machine using a weighted SVM loss, suitable for binary response problems. It applies group penalties to facilitate variable selection and structured sparsity. The majorization-minimization group coordinate descent (MM-GCD) algorithm is used for efficient computation. Only use with binary responses (\code{-1, 1}).
}
\examples{
\dontrun{
  set.seed(1)
  n <- 2000; p <- 10
  x <- MASS::mvrnorm(n, rep(0, p), diag(1, p))
  y <- (x \%*\% B[,1] / (0.5 + (x \%*\% B[,2] + 1)^2)) + 0.2 * rnorm(n)
  y.binary <- sign(y)
  fit <- ppwsvm(x, y.binary, H = 10, C = 2, lambda = 0.00003,
               gamma = 3.7, penalty = "grSCAD", max.iter = 100)
  fit$evectors[, 1:2]
}

}
